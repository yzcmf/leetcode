62. Unique Paths

A robot is located at the top-left corner of a m x n grid (marked 'Start' in the diagram below).

The robot can only move either down or right at any point in time. The robot is trying to reach the bottom-right corner of the grid (marked 'Finish' in the diagram below).

Note: m and n will be at most 100.

How many possible unique paths are there?

class Solution {
public:
    int uniquePaths(int m, int n) {
        if(m<1 || n<1) return 0;
        vector<vector<int>>dp(m,vector<int>(n));
        dp[0][0] = 1;
        for (int i = 1; i < n; i ++) dp[0][i] = 1;
        for (int j = 1; j < m; j ++) dp[j][0] = 1;
        for(int i=1;i<m;i++)
        {
          for(int j=1;j<n;j++)
          {
            dp[i][j] = dp[i-1][j]+dp[i][j-1];
          }
        }
        return dp[m-1][n-1];
        
        // //Rolled array;
        // if(m<1 || n<1) return 0;
        // vector<int>dp(n,1);
        // for(int i=1;i<m;i++)
        // {
        //   for(int j=1;j<n;j++)
        //   {
        //     dp[j] += dp[j-1];
        //   }
        // }
        
        // return dp[n-1];
    }
};