47. Permutations II

Given a collection of numbers that might contain duplicates, return all possible unique permutations.

For example,
[1,1,2] have the following unique permutations:

[
  [1,1,2],
  [1,2,1],
  [2,1,1]
]

class Solution {
public:
    /**
     * @param nums: A list of integers.
     * @return: A list of permutations.
     */
vector<vector<int>>permuteUnique(vector<int> num) {
        // write your code here
        vector<vector<int>> allPer;
        vector<int> per;
        if(num.empty()) 
        {
         allPer.push_back(per);
         return allPer;
        }
        sort(num.begin(),num.end());
        vector<bool> used(num.size(),false); //can use the element again from the start;
        findPerUniq(num, used, per, allPer);//if we use the start here,we choose one by one; 
        return allPer;
}
void findPerUniq(vector<int> &num, vector<bool> &used, vector<int> &per, vector<vector<int>> &allPer) 
{
        if(per.size()==num.size()) {
            allPer.push_back(per);
            return;
        }
        for(int i=0; i<num.size(); i++) {
            if(used[i]) continue;
            if(i>0 && num[i]==num[i-1] && used[i-1] == false) continue;
            used[i] = true;
            per.push_back(num[i]);
            findPerUniq(num, used, per, allPer);
            per.pop_back();
            used[i] = false;
        }
}
};