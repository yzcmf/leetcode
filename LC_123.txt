123. Best Time to Buy and Sell Stock III

Say you have an array for which the ith element is the price of a given stock on day i.

Design an algorithm to find the maximum profit. You may complete at most two transactions.

Note:
You may not engage in multiple transactions at the same time (ie, you must sell the stock before you buy again).

class Solution {
public:
    /**
     * @param prices: Given an integer array
     * @return: Maximum profit
     */
    int maxProfit(vector<int> &prices) {
        // write your code here
        if(prices.empty()) return 0;
        int n=prices.size();
        vector<int>leftProfit(n,0);
        vector<int>rightProfit(n,0);
        
        //计算A[0:i]的收益最大值
        int maxLeftProfit=0,minPrice = prices[0];
        for(int i=1;i<n;i++)
        {
            if(prices[i]<minPrice)
              minPrice = prices[i];
            else
              maxLeftProfit = max(maxLeftProfit,prices[i]-minPrice);
            leftProfit[i] = maxLeftProfit;  
        }
        
        //计算A[i:n-1]的收益最大值
        //最后这两个收益之和便是以i为分割的最大收益
        int maxRightProfit = 0,maxPrice = prices[n-1];
        for(int i=n-2;i>=0;i--)
        {
            if(prices[i]>maxPrice)
              maxPrice = prices[i];
            else 
              maxRightProfit = max(maxRightProfit,maxPrice-prices[i]);
            rightProfit[i] = maxRightProfit;
        }
        
        int ret = 0;
        for(int i=1;i<n;i++)
        {
          ret = max(ret,leftProfit[i]+rightProfit[i]); 
        }
        return ret;
    }
};