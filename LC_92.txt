92. Reverse Linked List II

Reverse a linked list from position m to n. Do it in-place and in one-pass.

For example:
Given 1->2->3->4->5->NULL, m = 2 and n = 4,

return 1->4->3->2->5->NULL.

Note:
Given m, n satisfy the following condition:
1 ≤ m ≤ n ≤ length of list. 

/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode(int x) : val(x), next(NULL) {}
 * };
 */
class Solution {
public:
    ListNode* reverseBetween(ListNode* head, int m, int n) {
        if(head == NULL || m>n) return NULL;
        ListNode * dummy = new ListNode(0);
        dummy->next = head;
        ListNode * node = dummy;
        
        for(int i=1;i<m;i++)
        {
            if(node->next == NULL) return NULL;
            node = node->next;
        }
        
        ListNode * Pre_mnode = node;
        ListNode * mnode = node->next;
        ListNode * nnode = mnode;
        ListNode * Post_nnode = nnode->next;
        
        for(int i=m;i<n;i++)
        {
            if(Post_nnode == NULL) return NULL;
          
            ListNode * t = Post_nnode->next;
            Post_nnode->next = nnode;
            nnode = Post_nnode;
            Post_nnode = t;
        }
        
        Pre_mnode->next = nnode;
        mnode->next = Post_nnode;
        
        return dummy->next;
    }
};