98. Validate Binary Search Tree

Given a binary tree, determine if it is a valid binary search tree (BST).

Assume a BST is defined as follows:

    The left subtree of a node contains only nodes with keys less than the node's key.
    The right subtree of a node contains only nodes with keys greater than the node's key.
    Both the left and right subtrees must also be binary search trees.

Example 1:

    2
   / \
  1   3

Binary tree [2,1,3], return true.

Example 2:

    1
   / \
  2   3

Binary tree [1,2,3], return false. 

/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
class Solution {
public:
    bool isValidBST(TreeNode *root) {
        // write your code here
        vector<int>list;
        inorder(root,list);
        for(int i=1;i<list.size();i++)
        {
            if(list[i]<=list[i-1])
            return false;
        }
        
        return true;
    }
    
    void inorder(TreeNode *root,vector<int>& list)
    {
        if(root == NULL) return;
        inorder(root->left,list);
        list.push_back(root->val);
        inorder(root->right,list);
    }
};