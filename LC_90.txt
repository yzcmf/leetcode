90. Subsets II

Given a collection of integers that might contain duplicates, nums, return all possible subsets.

Note: The solution set must not contain duplicate subsets.

For example,
If nums = [1,2,2], a solution is:

[
  [2],
  [1],
  [1,2,2],
  [2,2],
  [1,2],
  []
]

class Solution {
public:
    vector<vector<int>> subsetsWithDup(vector<int> &nums) {
        // write your code here
        vector<vector<int>>allSol;
    	vector<int>Sol;
    	if(nums.empty())return allSol;
    	allSol.push_back(Sol);
    	sort(nums.begin(),nums.end());// -- very important!
    	findsubsetsII(nums,Sol,allSol,0);
    	return allSol;
    }
    void findsubsetsII(vector<int> &nums,vector<int>&Sol,vector<vector<int>>&allSol,int start)
    {
        for(int i= start;i<nums.size();i++)
        {
            if(nums[i] == nums[i-1] && i>start) continue;
            Sol.push_back(nums[i]);
            allSol.push_back(Sol);
            findsubsetsII(nums,Sol,allSol,i+1);
            Sol.pop_back();
        }
    }
};