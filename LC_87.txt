87. Scramble String

    Total Accepted: 54410
    Total Submissions: 195330
    Difficulty: Hard
    Contributors: Admin

Given a string s1, we may represent it as a binary tree by partitioning it to two non-empty substrings recursively.

Below is one possible representation of s1 = "great":

    great
   /    \
  gr    eat
 / \    /  \
g   r  e   at
           / \
          a   t

To scramble the string, we may choose any non-leaf node and swap its two children.

For example, if we choose the node "gr" and swap its two children, it produces a scrambled string "rgeat".

    rgeat
   /    \
  rg    eat
 / \    /  \
r   g  e   at
           / \
          a   t

We say that "rgeat" is a scrambled string of "great".

Similarly, if we continue to swap the children of nodes "eat" and "at", it produces a scrambled string "rgtae".

    rgtae
   /    \
  rg    tae
 / \    /  \
r   g  ta  e
       / \
      t   a

We say that "rgtae" is a scrambled string of "great".

Given two strings s1 and s2 of the same length, determine if s2 is a scrambled string of s1. 

// class Solution {
// public:
//     bool isScramble(string s1, string s2) {
//         if (s1 == s2) return true;  
 
//         /* if have different characters, return false */  
//         string tmp_s1 = s1;  
//         string tmp_s2 = s2;  
        
//         int sz = s1.size();  
        
//         sort(tmp_s1.begin(), tmp_s1.end());  
//         sort(tmp_s2.begin(), tmp_s2.end());  
        
//         if (tmp_s1 != tmp_s2) return false;  

//         //s1="great",s2="rgeat"; using this ex here;
//         //s1="great",s2="rgtae"; can be another ex;
//         //Find one solution possible we successed;
//         for (int i = 1; i < sz; i++) {  
//             if (isScramble(s1.substr(0, i), s2.substr(0, i)) and isScramble(s1.substr(i), s2.substr(i))) {  
//                 return true;  
//             } //"eat" here;
//             if (isScramble(s1.substr(0, i), s2.substr(sz-i)) and isScramble(s1.substr(i), s2.substr(0,sz-i))) {  
//                 return true;  
//             } //"gr" and "rg" here;
//         }  
        
//         return false;  
//     }
// };

class Solution {
public:
    /**
     * @param s1 A string
     * @param s2 Another string
     * @return whether s2 is a scrambled string of s1
     */
    bool isScramble(string& s1, string& s2) {
        if (s1 == s2) return true;
        if (s1.size() != s2.size()) return false;
        string t1 = s1, t2 = s2;
        sort(t1.begin(), t1.end());
        sort(t2.begin(), t2.end());
        if (t1 != t2) return false;
        int n = s1.size();
        //s1="great",s2="rgeat"; using this ex here;
        //s1="great",s2="rgtae"; can be another ex;
        //Find one solution possible we successed;
        for (int i = 1; i < s1.size(); i++) {
            string a1 = s1.substr(0, i), b1 = s1.substr(i);//"eat" here,"gr" and "rg" here;
            string a2 = s2.substr(0, i), b2 = s2.substr(i);//"eat" here;
            string a3 = s2.substr(n - i), b3 = s2.substr(0, n - i);//"gr" and "rg" here;
            if ((isScramble(a1, a2) && isScramble(b1, b2)) || 
                (isScramble(a1, a3) && isScramble(b1, b3))) 
            {
                return true;
            }
        }
        return false;
    }
};