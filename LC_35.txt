35. Search Insert Position

Given a sorted array and a target value, return the index if the target is found. If not, return the index where it would be if it were inserted in order.

You may assume no duplicates in the array.

Here are few examples.
[1,3,5,6], 5 → 2
[1,3,5,6], 2 → 1
[1,3,5,6], 7 → 4
[1,3,5,6], 0 → 0 

class Solution {
public:
    int searchInsert(vector<int>& nums, int target) {
        if(nums.empty()) return 0;
        //Both the start and end should move with the mid plus or minus one;
        int start=0,end=nums.size()-1,mid; //Using the mid as the final index;
        while(start<=end)
        {
            mid=(start+end)/2;
            if(nums[mid]==target) return mid;
            else if(nums[mid]<target)start=mid+1;
            else end=mid-1;
        }
        // After the loop start,end = start+1;
        // The start could be -1 and end could be num.size();
        // That is not inside the array and the mid should always be in the array;
        if(target>nums[mid])
        return mid+1;
        else
        return mid;
    }
};