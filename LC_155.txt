155. Min Stack

Design a stack that supports push, pop, top, and retrieving the minimum element in constant time.

    push(x) -- Push element x onto stack.
    pop() -- Removes the element on top of the stack.
    top() -- Get the top element.
    getMin() -- Retrieve the minimum element in the stack.

Example:

MinStack minStack = new MinStack();
minStack.push(-2);
minStack.push(0);
minStack.push(-3);
minStack.getMin();   --> Returns -3.
minStack.pop();
minStack.top();      --> Returns 0.
minStack.getMin();   --> Returns -2.


class MinStack {
private:
stack<int>s;
stack<int>m;
public:
    /** initialize your data structure here. */
    MinStack() {
        
    }
    void push(int x) {
      s.push(x);
      if(m.empty()||x<=m.top())
      m.push(x);
    }
    void pop() {
      int temp = s.top();
      s.pop();
      if(temp == m.top())
      m.pop();
    }
    int top() {
       if(!s.empty())
       return s.top();
       else
       return -1;
    }
    int getMin() {
       if(!m.empty())
       return m.top();
       else
       return -1;
    }
};
/**
 * Your MinStack object will be instantiated and called as such:
 * MinStack obj = new MinStack();
 * obj.push(x);
 * obj.pop();
 * int param_3 = obj.top();
 * int param_4 = obj.getMin();
 */