76. Minimum Window Substring

Given a string S and a string T, find the minimum window in S which will contain all the characters in T in complexity O(n).

For example,
S = "ADOBECODEBANC"
T = "ABC"

Minimum window is "BANC".

Note:
If there is no such window in S that covers all characters in T, return the empty string "".

If there are multiple such windows, you are guaranteed that there will always be only one unique minimum window in S. 

class Solution {
public:
    string minWindow(string S, string T) {
        if (T.size() > S.size()) return "";
        string res = "";
        int left=0,cnt=0,minLen=S.size()+1;
        map<char,int>ht;
        //我们最开始先扫描一遍T，把对应的字符及其出现的次数存到哈希表中。
        for (int i=0; i<T.size();i++)ht[T[i]]++;
        for (int right=0;right<S.size();right++) {
            //然后开始遍历S，遇到T中的字符，就把对应的哈希表中的value减一
            if (ht.find(S[right])!= ht.end()) {
                ht[S[right]]--;
                if (ht[S[right]] >= 0) cnt++;
                //直到包含了T中的所有的字符。
                while (cnt == T.size()) {
                    //纪录一个字串并更新最小字串值
                    if (right - left + 1 < minLen) {
                        minLen = right - left + 1;
                        res = S.substr(left, minLen);
                    }
                    //如果left有某个在T的字符:ht[S[left]]++;
                    if (ht.find(S[left]) != ht.end()) {
                        ht[S[left]]++;//To see when it will above 0,when it greater than 0, it will be the key char in T;
                        if (ht[S[left]] > 0) cnt--; // The left now is the key char in T,if lost,need find a new one;
                    }
                    left++;//将子窗口的左边界向右移，略掉不在T中的字符
                }
            }
        }
        return res;
    }
};
//http://www.cnblogs.com/grandyang/p/4340948.html