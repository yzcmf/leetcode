114. Flatten Binary Tree to Linked List

Given a binary tree, flatten it to a linked list in-place.

For example,
Given

         1
        / \
       2   5
      / \   \
     3   4   6

The flattened tree should look like:

   1
    \
     2
      \
       3
        \
         4
          \
           5
            \
             6


class Solution {
public:
void flatten(TreeNode *root) {
        // write your code here
       if(root == NULL) return;
       vector<TreeNode*>node; 
       preorderTraversal(root,node);
       int n=node.size();
       for(int i=0;i<n-1;i++)
       {
           node[i]->left = NULL;
           node[i]->right = node[i+1];
       }
       node[n-1]->left = node[n-1]->right = NULL;
}
private:    
    void preorderTraversal(TreeNode *root,vector<TreeNode*>& node)
    {
        if(root == NULL) return;
        node.push_back(root);
        preorderTraversal(root->left,node);
        preorderTraversal(root->right,node);
        return;
    }
};