324. Wiggle Sort II

Given an unsorted array nums, reorder it such that nums[0] < nums[1] > nums[2] < nums[3]....

Example:
(1) Given nums = [1, 5, 1, 1, 6, 4], one possible answer is [1, 4, 1, 5, 1, 6].
(2) Given nums = [1, 3, 2, 2, 3, 1], one possible answer is [2, 3, 1, 3, 1, 2].

Note:
You may assume all input has valid answer.

Follow Up:
Can you do it in O(n) time and/or in-place with O(1) extra space? 

//--Time:O(nlogn);
//--Space:O(n);

class Solution {
public:
    void wiggleSort(vector<int>& nums) {
        vector<int> temp=nums;
        sort(temp.begin(),temp.end()); // O(n*log(n))
        int l=nums.size(), k=(l+1)/2-1, j=l-1;
        // k, j is for the index and should minus 1
        // Get one from the previous half and get one from the last half
        for(int i=0;i<l;i++)
        nums[i]= i&1 ?temp[j--]:temp[k--];
    }
};