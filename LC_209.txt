209. Minimum Size Subarray Sum

Given an array of n positive integers and a positive integer s, find the minimal length of a subarray of which the sum ≥ s. If there isn't one, return 0 instead.

For example, given the array [2,3,1,2,4,3] and s = 7,
the subarray [4,3] has the minimal length under the problem constraint.

click to show more practice.
More practice:

If you have figured out the O(n) solution, try coding another solution of which the time complexity is O(n log n).


//--Two pointers -- For subarray problem;
//--Time:O(n);
/*
我们需要定义两个指针left和right，分别记录子数组的左右的边界位置，
然后我们让right向右移,直到子数组和大于等于给定值或者right达到数组末尾，
此时我们更新最短距离,并且将left像右移一位，然后再sum中减去移去的值，
然后重复上面的步骤，直到right到达末尾，且left到达临界位置，
即要么到达边界，要么再往右移动，和就会小于给定值。
*/
class Solution {
public:
    /**
     * @param nums: a vector of integers
     * @param s: an integer
     * @return: an integer representing the minimum size of subarray
     */
    int minSubArrayLen(int s, vector<int>& nums) {
        // write your code here
        if(nums.empty()) return 0;
        int left = 0;
        int right= 0;
        int len = nums.size();
        int res = len+1;
        int sum = 0;
        
        while(right<len)
        {
            while(sum<s && right<len)
            {
                sum += nums[right];
                right++;
            }
            
            while(sum>=s)
            {
                res = min(res,right-left);
                sum -= nums[left];
                left++;
            }
        }
        
        return res == len+1 ? 0 : res;
    }
};