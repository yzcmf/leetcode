57. Insert Interval

Given a set of non-overlapping intervals, insert a new interval into the intervals (merge if necessary).

You may assume that the intervals were initially sorted according to their start times.

Example 1:
Given intervals [1,3],[6,9], insert and merge [2,5] in as [1,5],[6,9].

Example 2:
Given [1,2],[3,5],[6,7],[8,10],[12,16], insert and merge [4,9] in as [1,2],[3,10],[12,16].

This is because the new interval [4,9] overlaps with [3,5],[6,7],[8,10]. 


//You may assume that the intervals were initially sorted according to their start times.
class Solution {
public:
    struct comp{
        bool operator()(const Interval &a , const Interval &b)
        {
            return a.start<b.start;
        }
    };  
    vector<Interval> insert(vector<Interval>& intervals, Interval newInterval) {
        sort(intervals.begin(),intervals.end(),comp());
        vector<Interval> res;
        bool isInsert = false;
        
        for(int i=0;i<intervals.size();i++)
        {
            // already insert newInterval
            if(isInsert) {  
                res.push_back(intervals[i]);
                continue;
            }
            
            // insert newInterval before current interval
            if(newInterval.end < intervals[i].start) {  
                res.push_back(newInterval);
                res.push_back(intervals[i]);
                isInsert = true;
                continue;
            }
            
            // newInterval after current interval
            if(newInterval.start > intervals[i].end)
            res.push_back(intervals[i]);
            
            // combine newInterval with current interval
            if(newInterval.start<=intervals[i].end && intervals[i].start<=newInterval.end) {
                newInterval.start = min(newInterval.start, intervals[i].start);
                newInterval.end = max(newInterval.end, intervals[i].end);
                continue;
            }
            
        }
        
        if(!isInsert) res.push_back(newInterval);//Handle the ending case;
        return res;
    }
};