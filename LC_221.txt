221. Maximal Square

Given a 2D binary matrix filled with 0's and 1's, find the largest square containing only 1's and return its area.

For example, given the following matrix:

1 0 1 0 0
1 0 1 1 1
1 1 1 1 1
1 0 0 1 0

Return 4. 

//---DP:O(n^2);
class Solution {
public:
    int maximalSquare(vector<vector<char>>& matrix) {
        if(matrix.empty()||matrix[0].empty()) return 0;
        int m = matrix.size(),n = matrix[0].size(),res=0;
        vector<vector<int>>dp(m,vector<int>(n,0));
        
        for(int i=0;i<m;i++)
        {
            if(matrix[i][0] == '1')
            {
            dp[i][0] = 1;
            res = 1;
            }
        }
        
        for(int j=0;j<n;j++)
        {
            if(matrix[0][j] == '1')
            {
            dp[0][j] = 1;
            res = 1;
            }
        }
        
        for(int i=1;i<m;i++)
        {
            for(int j=1;j<n;j++)
            {
                if(matrix[i][j] == '1')
                dp[i][j] = min(dp[i-1][j-1],min(dp[i-1][j],dp[i][j-1]))+1;
                res = max(res,dp[i][j]);
            }
        }
        return res*res;
    }
};
//Good reference: 
//http://yucoding.blogspot.com/2015/10/leetcode-question-maximal-square.html
//http://www.cnblogs.com/easonliu/p/4548769.html
