18. 4Sum

Given an array S of n integers, are there elements a, b, c, and d in S such that a + b + c + d = target? Find all unique quadruplets in the array which gives the sum of target.

Note: The solution set must not contain duplicate quadruplets.

For example, given array S = [1, 0, -1, 0, -2, 2], and target = 0.

A solution set is:
[
  [-1,  0, 0, 1],
  [-2, -1, 1, 2],
  [-2,  0, 0, 2]
]


//DFS(based on the two sum problem)
//Time:O(k^n)
//Space:O(kn)
class Solution {
public:
    /**
     * @param numbers: Give an array numbersbers of n integer
     * @param target: you need to find four elements that's sum of target
     * @return: Find all unique quadruplets in the array which gives the sum of 
     *          zero.
     */
    vector<vector<int>>fourSum(vector<int> &nums, int target){
        vector<vector<int>>allSol;
        vector<int>Sol;
        sort(nums.begin(),nums.end());
        Ksum(allSol,Sol,nums,target,0,nums.size()-1,4);
        return allSol;
    }
    
     void Ksum(vector<vector<int>>&allSol,vector<int>&Sol,vector<int> &nums, int target,int start,int end,int k)
     {
         if(k<=1) return;
         if(k == 2)
         {
             two_sum(allSol,Sol,nums,target,start,end);
             return;
         }
         
         for(int i=start;i<=end+1-k;i++)//Note: the ksum i is start <= i <= end-(k-1); we fetch nums[i],left k-1 elements;
         {
             if(nums[i] == nums[i-1] && i>start) continue;
             Sol.push_back(nums[i]);
             Ksum(allSol,Sol,nums,target-nums[i],i+1,end,k-1);
             Sol.pop_back();
         }
     }
     
     void two_sum(vector<vector<int>>&allSol,vector<int>&Sol,vector<int> &nums, int target,int start,int end)
     {
         while(start<end)
         {
             int sum = nums[start] + nums[end];
             if(sum == target)
             {
                 Sol.push_back(nums[start]);
                 Sol.push_back(nums[end]);
                 allSol.push_back(Sol);
                 Sol.pop_back();
                 Sol.pop_back();
                 start++;
                 end--;
                 while(nums[start] == nums[start-1]) start++;
                 while(nums[end] == nums[end+1]) end--;
             }
             else if (sum<target)
             {
                 start++;
                 while(nums[start] == nums[start-1]) start++;
             }
             else
             {
                 end--;
                 while(nums[end] == nums[end+1]) end--;
             }
         }
         
     }
};