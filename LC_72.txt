72. Edit Distance

Given two words word1 and word2, find the minimum number of steps required to convert word1 to word2. (each operation is counted as 1 step.)

You have the following 3 operations permitted on a word:

a) Insert a character
b) Delete a character
c) Replace a character

class Solution {
public:
    int minDistance(string word1, string word2) {
        //dp[i][j] : word1[0:i-1] to be word2[0:j-1];
        int m = word1.size();
        int n = word2.size();
        vector<vector<int>>dp(m+1,vector<int>(n+1,0));
        for(int j=1;j<=n;j++)
        dp[0][j]=j;//When word1 is empty;    
        for(int i=1;i<=m;i++)
        {
            dp[i][0]=i; // When word2 is empty;
            for(int j=1;j<=n;j++)
            {
                dp[i][j] = dp[i-1][j-1];
                if(word1[i-1]!=word2[j-1]) dp[i][j]++;
                dp[i][j] = min(min(dp[i-1][j]+1, dp[i][j-1]+1), dp[i][j]);
            }
        }
        return dp[m][n];
    }
};
//http://bangbingsyb.blogspot.com/2014/11/leetcode-edit-distance.html