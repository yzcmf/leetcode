23. Merge k Sorted Lists

Merge k sorted linked lists and return it as one sorted list. Analyze and describe its complexity. 

/*
类似merge sort，每次将所有的list两两之间合并，直到所有list合并成一个。
如果用迭代而非递归，则空间复杂度为O(1)。时间复杂度：
2n * k/2 + 4n * k/4 + ... + (2^x)n * k/(2^x) = nk * x
k/(2^x) = 1 -> 2^x = k -> x = log2(k)
所以时间复杂度为O(nklog(k))
*/

class Solution {
public:
    ListNode* mergeKLists(vector<ListNode*>& lists) {
        if(lists.empty()) return NULL;
        int start=0,end=lists.size()-1;
        while(end>0)
        {
            start = 0;
            while(start<end)
            {
                lists[start] = mergetwoLists(lists[start],lists[end]);
                start++;
                end--;
            }
        }
        return lists[0];
    }
    ListNode* mergetwoLists(ListNode* l1,ListNode* l2)
    {
        ListNode * dummy = new ListNode(0);
        ListNode * p = dummy;
        
        while(l1 && l2)
        {
            if(l1->val > l2->val)
            {
                p->next = l2;
                l2 = l2->next;
            }
            
            else
            {
                p->next = l1;
                l1 = l1->next;
            }
            p = p->next;
        }
        
        p->next = (l1 == NULL) ? l2 : l1;
        
        return dummy->next;
        
    }
};