95. Unique Binary Search Trees II

Given an integer n, generate all structurally unique BST's (binary search trees) that store values 1...n.

For example,
Given n = 3, your program should return all 5 unique BST's shown below.

   1         3     3      2      1
    \       /     /      / \      \
     3     2     1      1   3      2
    /     /       \                 \
   2     1         2                 3


/**
 * Definition of TreeNode:
 * class TreeNode {
 * public:
 *     int val;
 *     TreeNode *left, *right;
 *     TreeNode(int val) {
 *         this->val = val;
 *         this->left = this->right = NULL;
 *     }
 * }
 */
class Solution {
public:
    /**
     * @paramn n: An integer
     * @return: A list of root
     */
    vector<TreeNode*> generateTrees(int n) {
        // write your code here
        if(n < 1) return vector<TreeNode*>{};
        return genBST(1,n);
    }
    
     vector<TreeNode*> genBST(int min,int max)
     {
         vector<TreeNode*> res;
         if(min>max)
         {
             res.push_back(NULL);
             return res;
         }
         
         for(int i=min;i<=max;i++)
         {
           vector<TreeNode*> leftSubTree = genBST(min,i-1);
           vector<TreeNode*> rightSubTree = genBST(i+1,max);  
          
           for(int j=0;j<leftSubTree.size();j++)
           {
              for(int k=0;k<rightSubTree.size();k++)
              {
                TreeNode *root = new TreeNode(i);  
                root->left = leftSubTree[j];
                root->right = rightSubTree[k];  
                res.push_back(root);  
              }
           }
           
         }
         return res;
     }
};
//http://bangbingsyb.blogspot.com/2014/11/leetcode-unique-binary-search-trees-i-ii.html