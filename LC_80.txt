80. Remove Duplicates from Sorted Array II

Follow up for "Remove Duplicates":
What if duplicates are allowed at most twice?

For example,
Given sorted array nums = [1,1,1,2,2,3],

Your function should return length = 5, with the first five elements of nums being 1, 1, 2, 2 and 3. It doesn't matter what you leave beyond the new length. 

// -- Reconstruct the array;
class Solution {
public:
    int removeDuplicates(vector<int>& nums) {
        //Method one -- common;
        // int count = 1;
        // int k=1;
        // int len = nums.size();
        // if(len<=2) return len;
        
        // for(int i=1;i<len;i++)
        // {
        //     if(nums[i] != nums[i-1]) count=1; // Unique number;
        //     else count++; // The number of duplicate numbers;
        //     if(count < 3) 
        //     {
        //       nums[k++] = nums[i];
        //     }
        // }
        // return k;
        
        //Commone two -- smart(using no duplicated: nums[i] > nums[i-2]);
        int k=2;
        int len = nums.size();
        if(len<=2) return len;
        
        for(int i=2;i<len;i++)
        {
            if(nums[i] > nums[k-2])
            nums[k++] = nums[i];
        }
        
        return k;
    }
};
//Similar problem:http://www.lintcode.com/en/problem/remove-duplicates-from-sorted-array/