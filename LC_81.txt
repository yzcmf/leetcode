81. Search in Rotated Sorted Array II

Follow up for "Search in Rotated Sorted Array":
What if duplicates are allowed?

Would this affect the run-time complexity? How and why?

Write a function to determine if a given target is in the array.

class Solution {
public:
    bool search(vector<int>& nums, int target) {
        
        if(nums.empty()) return -1;
        int start = 0,end =nums.size()-1;
        while(start+1<end)
        {
            int mid = (start+end)/2;
            if(nums[mid] == target) return true;
            else if(nums[start]<nums[mid])
            {
                if(nums[start]<=target && target<nums[mid])
                end = mid-1;
                else
                start = mid+1;
            }
            else if(nums[start]>nums[mid])
            {
                if(nums[mid]<target && target<=nums[end])
                start = mid+1;
                else
                end = mid-1;
            }
            else
            {
                start++;
            }
        }
        
        if(nums[start] == target) 
        return true;
        if (nums[end] == target)
        return true;
        
        return false;
    }
};