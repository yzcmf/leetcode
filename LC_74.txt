74. Search a 2D Matrix

Write an efficient algorithm that searches for a value in an m x n matrix. This matrix has the following properties:

    Integers in each row are sorted from left to right.
    The first integer of each row is greater than the last integer of the previous row.

For example,

Consider the following matrix:

[
  [1,   3,  5,  7],
  [10, 11, 16, 20],
  [23, 30, 34, 50]
]

Given target = 3, return true.

// -- Common Solution
//Time:O(logn+logm)
// class Solution {
// public:
//     bool searchMatrix(vector<vector<int>>& matrix, int target) {
//         if(matrix.empty()||matrix[0].empty()) return false;
//         int start = 0,end = matrix.size()-1,mid;
//         while(start<=end)
//         {
//             mid = (start+end)/2;
//             if(matrix[mid][0]<target) start = mid+1;
//             else if(matrix[mid][0]>target) end = mid-1;
//             else
//             {
//              return true;
//             }
//         }
        
//         //Do not forget about this;
//         if(start == 0) return false;
//         int row = start-1;
//         start = 0,end = matrix[0].size()-1;
    
//         while(start<=end)
//         {
//             mid = (start+end)/2;
//             if(matrix[row][mid]<target) start = mid+1;
//             else if(matrix[row][mid]>target) end = mid-1;
//             else
//             {
//              return true;
//             }
//         }
        
//         return false;
//     }
// };
//将矩阵看成数组,利用二分查找，运行时间12ms,时间复杂度O(log(mn))
//将m*n的矩阵看成数组，即matrix[x][y]=>a[x*n+y]
//数组也可以转回m*n矩阵，即a[x]=>matrix[x/n][x%n]
class Solution {
public:
    bool searchMatrix(vector<vector<int>>& matrix, int target) {
       if (matrix.empty())  return false;
		 int m = matrix.size(), n = matrix[0].size();
		 int low = 0, high = m*n - 1;
		 while (low<=high)
		 {
			 int mid = low + (high - low) / 2;
			 int value = matrix[mid / n][mid%n];
			 if (value == target)
				 return true;
			 else if (value < target)
				 low = mid + 1;
			 else
				 high = mid - 1;
		 }
		 return false;
		 
    }
};