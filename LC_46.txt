46. Permutations

    Total Accepted: 126978
    Total Submissions: 324950
    Difficulty: Medium
    Contributors: Admin

Given a collection of distinct numbers, return all possible permutations.

For example,
[1,2,3] have the following permutations:

[
  [1,2,3],
  [1,3,2],
  [2,1,3],
  [2,3,1],
  [3,1,2],
  [3,2,1]
]


//Time:O(n^n);
//Space:O(n*n);
class Solution {
public:
    /**
     * @param nums: A list of integers.
     * @return: A list of permutations.
     */
vector<vector<int>>permute(vector<int> num) {
        // write your code here
        vector<vector<int>> allPer;
        vector<int> per;
        if(num.empty()) 
        {
         allPer.push_back(per);
         return allPer;
        }
        vector<bool>used(num.size(),false);//can use the element again from the start;
        findPerUniq(num, used, per, allPer);//if we use the start here,we choose one by one; 
        return allPer;
}
void findPerUniq(vector<int> &num, vector<bool> &used, vector<int> &per,vector<vector<int>> &allPer) 
{
        if(per.size()==num.size()) {
            allPer.push_back(per);
            return;
        }
        
        for(int i=0; i<num.size(); i++) {
            if(used[i]) continue;
            used[i] = true;
            per.push_back(num[i]);
            findPerUniq(num, used, per, allPer);
            per.pop_back();
            used[i] = false;
        }
}
};