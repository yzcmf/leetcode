216. Combination Sum III

Find all possible combinations of k numbers that add up to a number n, given that only numbers from 1 to 9 can be used and each combination should be a unique set of numbers.

Example 1:

Input: k = 3, n = 7

Output:

[[1,2,4]]


Example 2:

Input: k = 3, n = 9

Output:

[[1,2,6], [1,3,5], [2,3,4]]


class Solution {
public:
    vector<vector<int>> combinationSum3(int k, int n) {
        vector<vector<int>>allSol;
        vector<int>Sol;
        DFS(allSol,Sol,k,n,1);
        return allSol;
    }
    void DFS(vector<vector<int>>&allSol,vector<int>&Sol,int k, int n,int start)
    {
        if(k==0)
        {
            if(n != 0) return;
            if(n == 0)
            {
                allSol.push_back(Sol);
                return;
            }
        }
        for(int i=start;i<=9;i++) // -- Note: only 1-9 can be used in this problem;
        {
            Sol.push_back(i);
            DFS(allSol,Sol,k-1,n-i,i+1);
            Sol.pop_back();
        }
    }
};