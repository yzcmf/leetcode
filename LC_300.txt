300. Longest Increasing Subsequence

    Total Accepted: 51027
    Total Submissions: 139358
    Difficulty: Medium
    Contributors: Admin

Given an unsorted array of integers, find the length of longest increasing subsequence.

For example,
Given [10, 9, 2, 5, 3, 7, 101, 18],
The longest increasing subsequence is [2, 3, 7, 101], therefore the length is 4. Note that there may be more than one LIS combination, it is only necessary for you to return the length.

Your algorithm should run in O(n^2) complexity.

Follow up: Could you improve it to O(n log n) time complexity?

//---dp[i]:The lengthOfLIS before the index i;
//Time:O(n^2);
//Space:O(n);
class Solution {
public:
    int lengthOfLIS(vector<int>& nums) {
        int n = nums.size(), res = 0;
        if(n == 0) return res;
        vector<int>dp(n, 1);
        for(int i = 0; i < n; i++){
            for(int j = 0; j < i; j++){
                if(nums[j] < nums[i])
                    dp[i] = max(dp[i], dp[j]+1);
            }
        }
        for(auto i : dp)res = max(res,i);
        return res;
    }
};