101. Symmetric Tree

Given a binary tree, check whether it is a mirror of itself (ie, symmetric around its center).

For example, this binary tree [1,2,2,3,4,4,3] is symmetric:

    1
   / \
  2   2
 / \ / \
3  4 4  3

But the following [1,2,2,null,3,null,3] is not:

    1
   / \
  2   2
   \   \
   3    3

Note:
Bonus points if you could solve it both recursively and iteratively. 

class Solution {
public:
    bool isSymmetric(TreeNode* root) {  
        if (root == NULL) return true;  
        return ifSymmetric(root->left,root->right);  
    }  
  
    bool ifSymmetric(TreeNode* t1, TreeNode* t2){  
        if (t1==NULL && t2==NULL)   
            return true;  
        else if (t1 == NULL || t2 == NULL)   
            return false;  
        return t1->val == t2->val && ifSymmetric(t1->left, t2->right) && ifSymmetric(t1->right, t2->left);  
    }  
};