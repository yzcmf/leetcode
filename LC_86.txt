86. Partition List

Given a linked list and a value x, partition it such that all nodes less than x come before nodes greater than or equal to x.

You should preserve the original relative order of the nodes in each of the two partitions.

For example,
Given 1->4->3->2->5->2 and x = 3,
return 1->2->2->4->3->5. 

/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode(int x) : val(x), next(NULL) {}
 * };
 */
class Solution {
public:
    ListNode* partition(ListNode* head, int x) {
         if(head==NULL) return NULL;
        //We need four marks and learn how to make them together;
        ListNode * p=head;
        ListNode *leftdummy= new ListNode(0);
        ListNode *left= leftdummy;
        ListNode *rightdummy= new ListNode(0);
        ListNode *right= rightdummy;
        while(p)
        {
            if(p->val<x)
            {
              left->next = p;
              left=left->next;
            }else
            {
              right->next = p;
              right =right->next;
            }
          p=p->next;
        }
        right->next=NULL;
        left->next=rightdummy->next;
        return leftdummy->next;
    }
};