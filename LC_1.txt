1. Two Sum
Given an array of integers, return indices of the two numbers such that they add up to a specific target.

You may assume that each input would have exactly one solution.

Example:

Given nums = [2, 7, 11, 15], target = 9,

Because nums[0] + nums[1] = 2 + 7 = 9,
return [0, 1].

//--Two pointers
//Time:O(nlogn)
//Space:O(1)
class Solution {
public:
    vector<int> twoSum(vector<int>&nums, int target) {
        vector<int>list = nums; 
        sort(list.begin(),list.end());  
        int len = nums.size();  
        int left = 0;  
        int right = len - 1; 
        vector<int>res;
        while(left < right)
        {  
            int sum = list[left] + list[right];
            if(sum == target)  
            {  
                for(int i=0;i<len;i++)
                {  
                    if(list[left] == nums[i]) res.push_back(i);
                    else if(list[right] == nums[i]) res.push_back(i);
                }  
                break;  
            }  
            else if(sum > target)  
            {  
                right--;  
            }  
            else  
            {  
                left++;  
            }  
        }  
          
        return res;  
    }
};
//--Hash map
//Time:O(n)
//Space:O(n)
class Solution
{
public:   
vector<int> twoSum(vector<int> &nums, int target) {  
    vector<int>res;  
    map<int,int>ht;  
    for (int i=0;i<nums.size();i++) 
    {
        if (ht.find(target-nums[i]) != ht.end()) 
        {  
            res.push_back(ht[target - nums[i]]);  
            res.push_back(i);  
            return res;  
        }  
        else 
        ht[nums[i]] = i;  
    }    
    return res;  
}  
};
