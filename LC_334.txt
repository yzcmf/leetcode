334. Increasing Triplet Subsequence

Given an unsorted array return whether an increasing subsequence of length 3 exists or not in the array.

Formally the function should:

    Return true if there exists i, j, k
    such that arr[i] < arr[j] < arr[k] given 0 ≤ i < j < k ≤ n-1 else return false. 

Your algorithm should run in O(n) time complexity and O(1) space complexity.

Examples:
Given [1, 2, 3, 4, 5],
return true.

Given [5, 4, 3, 2, 1],
return false. 

class Solution {
public:
    bool increasingTriplet(vector<int>& nums) {
        if(nums.empty() || nums.size()<3) return false;
        int small1 = INT_MAX;
        int small2 = INT_MAX;
        for(int i=0;i<nums.size();i++)
        {
            if(nums[i]<=small1)
            small1 = nums[i];
            else if(nums[i]<=small2) // --can't use the 'if' here, beacuse we want: if first 'if' happened, then second not;
            small2 = nums[i];
            else
            return true;
        }
        return false;
    }
};